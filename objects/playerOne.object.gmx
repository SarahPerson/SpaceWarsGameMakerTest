<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spritePlayerOne</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_clockwise = ord('D'); //for rotate clockwise
key_counterclockwise = ord('A'); //for rotate counterclockwise
key_shoot = ord('W'); //to shoot missiles 
key_thrust = ord('S'); //to thrust rocket
key_test = ord('T'); //key to test the thrusting mechanic

ROTATION_STEP = 5;
currentRotation = 0;

xVelocity = 0;
yVelocity=0;
THRUST=0.05;
canShoot=true;


 

image_angle = currentRotation;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set can shoot
canShoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine the movement of the ship based off of its velocity 
//Add velocity to the x and y position
x=x+xVelocity;
y=y+yVelocity;


//Keep the ship in screen!
//Adjust the y position
if(y&lt;0)
{
    y=768;
}
if (x&lt;0)
{
    x=1024;
}
//Adjust the x position
if(x&gt;1024)
{
    x=0;
}
if(y&gt;768)
{
    y=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine keypress action

if( keyboard_check(key_clockwise))
{

    currentRotation = currentRotation -  ROTATION_STEP;
    image_angle = currentRotation;
}

if( keyboard_check(key_counterclockwise))
{

    currentRotation = currentRotation + ROTATION_STEP;
    image_angle = currentRotation;
    
}
if(keyboard_check(key_thrust))
{
  
    
    //Get x and y velocity based off of current rotation 
    angle = currentRotation*pi/180;
    xVelocity = xVelocity-THRUST*sin(angle);
    yVelocity = yVelocity-THRUST*cos(angle);



}
if(keyboard_check(key_shoot))
{

    if(canShoot){
    instance_create(playerOne.x, playerOne.y, missileObject);
    canShoot=false;
    }
    
    if(alarm[0]==-1)
    {
    alarm[0]= room_speed*(0.5);
    }

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
